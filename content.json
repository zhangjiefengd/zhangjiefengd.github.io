[{"title":"","date":"2017-09-12T04:21:43.064Z","path":"2017/09/12/正则表达/","text":"\\d匹配一个数字,\\w匹配一个数字或字母;","tags":[]},{"title":"webpack","date":"2017-09-08T03:15:38.749Z","path":"2017/09/08/webpack/","text":"","tags":[]},{"title":"form","date":"2017-07-30T07:56:40.806Z","path":"2017/07/30/form/","text":"为了解决重复提交造成的错误： 在第一次提交后就禁用提交按钮； 利用onsubmit时间处理程序取消后续的表单提交操作","tags":[]},{"title":"node.js note","date":"2017-07-28T03:18:15.260Z","path":"2017/07/28/node.js/","text":"将函数或数组输出必须用module.exports给对象赋值。 exports是个已经存在的空对象{}可以继续在中间添加新的键值； 直接对module.exports赋值，可以应对多种情况。 1234567module.exports = &#123; foo: function()&#123;return &apos;foo&apos;;&#125;&#125;;or module.exports = &#123; function()&#123; return &apos;foo&apos;;&#125;&#125; 在node中: 全局对象是global; process是代表当前node.js进程,通过process对象能拿到许多有用的信息; process.nextTick()并不是立刻执行的,而是在下一次事件循环; process.on(&#39;exit&#39;,function(){});是在程序结束的时候才执行; 异步读取文件 123456789var fs = require(&apos;fs&apos;);fs.readFile(&apos;sample.txt&apos;,&apos;utf-8&apos;,function(err,data)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(data); &#125;&#125;) 正常读取时，err参数为null,data参数为读取到的string;当读取发生错误时,err代表错误对象,data为undefined.–这是标准的回调函数:第一参数代表错误信息,第二参数代表结果. 当读取二进制文件时: 不传入文件的编码，回调函数的data参数将会变成返回一个buffer对象,buffer是一个包含零个或任意字节的数组(与array不同); 同步读取文件: 与异步不同的是函数名改为readFileSync,回调函数的data被函数直接返回. 抓取错误需要用try...catch; 123456try&#123; var data = fs.readFileSync(&apos;sample.txt&apos;,&apos;utf-8&apos;); console.log(data);&#125;catch(err)&#123; console.log(&apos;It\\&apos;s wrong !&apos;);&#125; 写入文件: 通过fs.writeFile()实现(同步) 12345678910var fs = require(&apos;fs&apos;);var data = &apos;Hello, Node.js&apos;;fs.writeFile(&apos;文件名&apos;,数据，回调函数function(err)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(&apos;ok&apos;); &#125;&#125;); 异步与异步读取文件是相似的. 获取文件的信息情况: 12345678910111213141516var fs = require(&apos;fs&apos;);fs.stat(&apos;name&apos;,function(err,data)&#123; if(err)&#123; console.log(err); &#125;else&#123; //是否是文件，目录 console.log(&apos;isFile: &apos;+stat.isFile()); console.log(&apos;isDirectory: &apos;+stat.isDirectory()); if(stat.isFile())&#123; console.log(&apos;size: &apos;+stat.size); console.log(&apos;time: &apos;+stat.birthtime); console.log(&apos;mtime: &apos;+stat.mtime); &#125; &#125;&#125;);","tags":[]},{"title":"学习","date":"2017-07-23T07:52:07.973Z","path":"2017/07/23/New life/","text":"###BFC### Block formatting context简称BFC,块级盒参与块级格式的上下文，是用于布局块级盒子的一块渲染的区域。 BFC的形成条件： float的值不为none； position 的值为fixed和absolute; display的值为table-cell、table-caption、inline-block、fiex或inline-flex; overflow不为visibility。 BFC的特性 在BFC中，盒子都是从它的包含块的顶部一个一个的垂直放置的，盒模型的垂直间距是取决于margin，但是在BFC中margin的在垂直方向和盒模型的算法是不相同的。在BFC中两个相邻盒模型的margin值是取其中最大的那个值，而不是两个margin值得和。 在BFC中，每个盒子的左(右)边边界是紧挨着父级的左(右)边界的；既使是浮动元素也是一样的作用(即使是一个盒子的行盒因为浮动而收缩了)，当然这个盒子又新建立一个新的BFC(在某些情况下这个盒子的自身会因浮动而变窄)。 ###IFC### Inline formatting context简称IFC，是行内级盒子和行级格式的上下文。 分布情况： 在IFC中，盒子从顶端开始一个个水平放置，水平的margin、border和padding被平分，对其的方式不定，大概分为从顶部和底部对齐，或者是通过文字的基线进行对齐，包含着一行的盒子就叫做line-box。它的高度是由浮动的情况和父级所决定，高度是由line-height的计算机结果所决定的。","tags":[]},{"title":"js笔记","date":"2017-07-21T02:06:04.527Z","path":"2017/07/21/--js笔记/","text":"Map就是一个二维的数组，一个key对应一个value，多次放入value会将前面value覆盖； 1var a = new Map();a.set()加入，a.has()是否存在；a.get()获取value值 Set就是一个不会重复的一个数组； Map和Set不能用下标遍历数组 循环 : for( (key)in(value) ) 得到的是string而不是number遍历的是对象属性名 do{循环体}while(判断条件)只有这个循环是必须执行一次 Array、Map和Set都属于iterable类型。 iterable类型可以通过新的for ... of循环来遍历 12345var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];a.name = &apos;Hello&apos;;for (var x of a) &#123; alert(x); &#125; iterable的内置函数forEach 123456var s = [];a.forEach(function(element, index,arry)&#123; //element: 指向当前的元素的值(value) //index: 索引(key) //arry: 指向本类型&#125;); 对原函数调用函数其中this的解决可用： ​ apply()接收两个参数第一个是绑定this的变量，第二个是array表示将函数本身的参数打包成Array再传入，而call()与之不同的是第二个是把参数按顺序传入(可以继承另一个对象的属性) map()得调用就是将Array中传入某个函数并返回新的Array ; reduce()和reduceRight()都接收两个参数，在每一项调用的函数和（可选）作为归并基础的初始值，函数将接受四个参数：前一个值、当前值、项的索引和数组对象。将返回值继续和下一个元素累积做处理; sort()默认是按照ASCLL码进行排列的升序，我们也可以自定义一个函数进行排序; push()可接受任意数量的参数，将它们添加到数组的末尾，并返回数组的长度; pop()是从数组末尾移除最后一项，减少数组的长度，并返回移除数组的项; shift()取得第一项，原数组的长度减少一项; unshift()在数组的前端添加任意项并返回数组的长度; concat()数组的合并，先会创建一个副本，然后将接受到的参数添加到副本的末尾，最后再返回新构建的数组; slice()基于原数组中的一项或多项创建一个新的数组，可接受两个参数(起始位置，结束的位置)，若是一个参数结束将是原数组的最后一项; splice()可接受三个参数，第一个参数是起始位置，第二个参数是要删除数组的数量，第三个参数是需要添加的项; index()和unindex()都接收两个参数，要查找的项和(可选的)表示查找起点位置的索引; every():对数组的每一项运行给定函数，函数对每一项都返回true则返回true; filter():让数组的每一项运行给定的函数，返回函数会返回true的项组成的数组; some:对数组的没一项运行给定函数，如果函数对任意一项返回true则函数返回true; 闭包：返回函数不要引用任何循环变量，或者后续会发生变化的变量 闭包让函数延迟执行，并且能携带对外完全隐藏的局部变量，能将多参数的函数变为单参数的函数 12345678function make_pow(n)&#123; return function(x)&#123; return Math.pow(x,n); &#125;&#125;var pown = make_pow(n);poe3(x) 箭头函数： 由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略： 123456789var obj = &#123; birth: 1990, getAge: function (year) &#123; var b = this.birth; var fn = (y) =&gt; y - this.birth; // this.birth仍是1990 return fn.call(&#123;birth:2000&#125;, year); &#125;&#125;;obj.getAge(2015);","tags":[]},{"title":"","date":"2017-07-20T08:56:47.040Z","path":"2017/07/20/mayion/","text":"网页可见区域宽： document.body.clientWidth; 网页可见区域高： document.body.clientHeight; 网页可见区域宽： document.body.offsetWidth (包括边线和滚动条的宽); 网页可见区域高： document.body.offsetHeight (包括边线的宽); 网页正文全文宽： document.body.scrollWidth; 网页正文全文高： document.body.scrollHeight; 网页被卷去的高(ff)：document.body.scrollTop; 网页被卷去的高(ie): document.documentElement.scrollTop; 网页被卷去的左：document.body.scrollLeft; 网页正文部分上：window.screenTop; 网页正文部分左：window.screenLeft; 某个元素的宽度：obj.offsetWidth; 某个元素的高度：obj.offsetHeight; 某个元素的上边界到body最顶部的距离：obj.offsetTop;（在元素的包含元素不含滚动条的情况下） 某个元素的左边界到body最左边的距离：obj.offsetLeft;（在元素的包含元素不含滚动条的情况下） 返回当前元素的上边界到它的包含元素的上边界的偏移量：obj.offsetTop（在元素的包含元素含滚动条的情况下） 返回当前元素的左边界到它的包含元素的左边界的偏移量：obj.offsetLeft（在元素的包含元素含滚动条的情况下）","tags":[]},{"title":"Markdown","date":"2017-06-11T09:04:16.399Z","path":"2017/06/11/Know markdown/","text":"标题： 类Setext：用底线 最高阶标题用等号（=）表示；—&gt;可多个表示 第二阶标题用减号（-）表示；—&gt;可多个表示 类Atx：在首行用1-6个#表示； 符号的个数代表的是几级标题；—&gt;可选择性是否闭合 区块引用： 在每行前加上（&gt;&gt; &gt;）； 区块引用可以嵌套（引用内的引用），根据层次加上不同数量的 &gt; ： 列表： 支持有序列表和无序列表 无序列表使用星号、加号或是减号作为列表标记： 有序列表则使用数字接着一个英文句点： 注意： 需要在后面加空格才能有效； 如果列表项目间用空行分开,在输出 HTML 时 Markdown 就会将项目内容用p标签包起来； 列表项目可以包括多个段落，但是每个段落要缩进四个空格或者一个制表符； 在列表中放引用用&gt; &gt;是需要缩进的； 如果要放代码区块的话，该区块就需要缩进两次; 在行首出现数字-句点-空白，可以在句点前面加上反斜杠避免与之冲突。 代码： 代码小段： 想要标记一小段行内的代码，我们可以用单引号将之括起来； 想在代码区段中插入反引号，可以用多个反引号来开始或结束代码区段； 代码块区： 有时候我们需要原始的代码板块来说明，在Markdown中用和标签将代码区段包起来; 建立代码区需要缩进4个空格或是一个制表符就ok，在转换后缩进会被移除。 代码区将会持续到没有缩进的一行(或是文件结尾)； 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理,但是代码块区一般是不会转换。 分割线： 在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西,也可以在星号或是减号中间插入空格。 区段元素： 链接： 主要分为两种形式：行内式和参考式两种形式。都是需要将链接的文字用[]标记。 行内式的链接： 只要在方块括号后面紧接着圆括号并插入网址链接即可，如果还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来。列如： This [link](http://www.jq20.cn/ &quot;myblog&quot;)is going to paradise. or This [link](http://www.jq20.cn/ )is going to paradise. 注意： 要链接到同一主机的资源可以使用相对路径。 参考式： 它的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This place is going to [paradise][id] . [id]: http://www.jq20.cn/ &quot;this is title&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字; 接着一个冒号; 接着一个以上的空格或制表符; 接着链接的网址(若不对就是版本的问题，可用尖括号将网址括起来); 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着;若网址太长为了美观可以将之放在下一行（可加缩进）。 注意： 网址的定义只有在鼠标放在链接的时候才会出现，不会直接出现在文件中； 链接辨别标签可以有字母（不会区分大小写）、数字、空格和标点符号； 隐式链接：将前面的参考式链接的id去掉，直接用链接的文字来定义链接； 我们最好将连接的定义放在文本的末尾。 自动链接： 网址的链接文字和链接地址一样就可以直接用一个尖括号将网址括起来就形成了自动网址。 图片： 插入图片的方法和插入链接的方法是相差无几的，具体步骤： 先加一个感叹号； 接着加入方括号里面添加图片代替文字； 再加圆括号，里面放入图片的网址和备注的文字（和加入链接的方式一样）； ![Alt text](你的路径 备注) 前面的内容都是固定的，只有后面的路径和备注可自己改变。 强调： 一般将用*和_作为标记强调的字符，单个符号包围将被转为标签，两个会被转成； 但是我们要注意什么符号开头就以什么符号结尾； 当符号的两边都有空白会被当做普通的字符，可向转译符(反斜杠:想加入普通的符号都可用)求救。","tags":[]},{"title":"JavaScript--小技巧","date":"2017-06-11T07:40:52.620Z","path":"2017/06/11/Learn/","text":"在JavaScript中为减少全局变量命名的冲突我们将所有的变量或者函数都绑定在一个全局变量中；Example: 12345678var MYAPP = &#123;&#125;; // 唯一的全局变量MYAPP:MYAPP.name = &apos;myapp&apos;; // 其他变量:MYAPP.version = 1.0;// 其他函数:MYAPP.foo = function () &#123; return &apos;foo&apos;;&#125;;","tags":[]},{"title":"css3动画","date":"2017-06-02T15:21:42.486Z","path":"2017/06/02/animation/","text":"animation的属性: 一、动画目标的名字: animation-name 二、动画一周期花的时间: animation-duration 三、动画的速度控制：animation-timing-function linear: 速度一直不变； ease: 默认的属性，低速-加快-变慢； ease-on,ease-out,ease-in-out: 低速开始，低速结束，低速开始和结束； cubic-bezier(n,n,n,n)–三次贝塞尔函数: 从0-1中选择想要的数值去改变速度。 四、动画开始的时间: animation-delay 负值为跳过时间进入动画； 五、动画播放的次数: animation-iteration-count 固定的次数或是infinite无限次； 六、动画是否逆向地播放: animation-direction 默认normal，或alternate轮流反向播放； 七、动画外的时间状态: animation-fill-mode none: 默认的状态； forwards: 最后一个画面； backwards: 最开始的状态； both: 向前和向后的填充都被应用。 八、动画暂停和运行的控制: animation-play-state paused 规定动画暂停 running 规定动画播放","tags":[]},{"title":"windows中github的ssh密匙","date":"2017-05-12T15:57:43.120Z","path":"2017/05/12/github添加ssh/","text":"检查本机是否有ssh key设置 输入 $cd ~/.ssh $ls 检查是否有id_rsa和id_rsa.pub这两个文件，有这两个文件就直接在你的github账号中的settings中ssh and GPG keys中添加ssh的内容。 若没有则进行 $ssh-keygen -t rsa -C “你的邮箱” 以后全部回车就将生成id_rsa和id_rsa.pub两个文件，再进行以上操作。 一个账号对应一个ssh，所以想再加一个就在.ssh文件所在的位置找到.gitconfid文件用你的文本编辑器添加你的用户名和邮箱。在进行以上操作，只有一处不同。 在$ssh-keygen -t rsa -C “你的邮箱”后最先会显示 Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 不要回车 改变起名字 列如：Enter file in which to save the key (/c/Users/you/.ssh/id_rsa_ppp): [Press enter]","tags":[]},{"title":"linux手动搭配lamp环境","date":"2017-04-16T08:43:25.352Z","path":"2017/04/16/second/","text":"一、准备工作： 1、配置防火墙，开启80端口、3306端口 vi /etc/sysconfig/iptables -A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT //允许80端口通过防火墙 -A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT //允许3306端口通过防火墙 将以上内容添加到 -A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT 的下面 /etc/init.d/iptables restart //最后重启防火墙使配置生效2、关闭SELINUX vi /etc/selinux/config 找到 #SELINUX=enforcing //注释掉 找到 #SELINUXTYPE=targeted //注释掉 SELINUX=disabled //增加 :wq //保存，关闭 shutdown -r now //重启系统 二、安装：1、安装Apache 卸载自带httpd: yum remove httpd yum install httpd //根据提示，输入Y安装即可成功安装 /etc/init.d/httpd start //启动Apache 备注：Apache启动之后会提示错误： 正在启动 httpd:httpd: Could not reliably determine the server’s fully qualif domain name, using ::1 for ServerName 解决办法： vi /etc/httpd/conf/httpd.conf //编辑 找到 #ServerName www.example.com:80 修改为 ServerName www.osyunwei.com:80 //这里设置为你自己的域名，如果没有域名，可以设置为localhost :wq! //保存退出 chkconfig httpd on //设为开机启动 /etc/init.d/httpd restart //重启Apache 2、安装MySQL 先卸载自带mysql: yum remove mysql mysql-server mysql-libs compat-mysql51 rm -rf /var/lib/mysql rm /etc/my.cnf 安装： yum install mysql mysql-server //询问是否要安装，输入Y即可自动安装,直到安装完成 /etc/init.d/mysqld start //启动MySQL chkconfig mysqld on //设为开机启动 cp /usr/share/mysql/my-medium.cnf /etc/my.cnf //拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可） 为root账户设置密码： mysql_secure_installation 回车，根据提示输入Y输入2次密码密码是不可见的根据提示一路输入Y最后出现：Thanks for using MySQL! MySql密码设置完成，重新启动 MySQL： /etc/init.d/mysqld restart //重启 3、安装PHP5 yum install php 根据提示输入Y直到安装完成 安装PHP组件，使 PHP5 支持 MySQL yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt 这里选择以上安装包进行安装 根据提示输入Y回车 /etc/init.d/mysqld restart //重启MySql /etc/init.d/httpd restart //重启Apche 相关配置的修改，–&gt;可以根据自己的需求修改 编辑文件也可以用FileZilla将文件下载下来用编辑器修改 1、Apache配置vi /etc/httpd/conf/httpd.conf //编辑文件 在44行将 ServerTokens OS 修改为：ServerTokens Prod （在出现错误页的时候不显示服务器操作系统的名称） 在76行将 KeepAlive Off 修改为：KeepAlive On （允许程序性联机） 在83行 MaxKeepAliveRequests 100 修改为：MaxKeepAliveRequests 1000 （增加同时连接数） 在331行将 Options Indexes FollowSymLinks 修改为：Options i n c l u d es e x e cCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录） 在338行将 AllowOverride None 修改为：AllowOverride All （允许.htaccess） 在402行 DirectoryIndex index.html index.html.var 修改为：DirectoryIndex index.html index.htm Default.html Default.htm index.php Default.php index.html.var （设置默认首页文件，增加index.php） 在536行将 ServerSignature On 修改为：ServerSignature Off （在错误页中不显示Apache的版本） 在554行将 Options Indexes MultiViews FollowSymLinks 修改为 Options MultiViews FollowSymLinks（不在浏览器上显示树状目录结构） 在759行 AddDefaultCharset UTF-8 修改为：AddDefaultCharset GB2312 （添加GB2312为默认编码） 在796行将 #AddHandler cgi-script .cgi 修改为：AddHandler cgi-script .cgi .pl （允许扩展名为.pl的CGI脚本运行） :wq! //保存退出 /etc/init.d/httpd restart //重启 rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html //删除默认测试页 2、php配置 vi /etc/php.ini //编辑 在229行 short_open_tag = ON //支持php短标签 在380行 open_basedir = .:/tmp/ //设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/ 在432行 expose_php = Off //禁止显示php版本的信息 在745行 magic_quotes_gpc = On //打开magic_quotes_gpc来防止SQL注入 在946行 把前面的分号去掉 :wq! //保存退出 /etc/init.d/mysqld restart //重启MySql /etc/init.d/httpd restart //重启Apche 测试：cd /var/www/html vi index.php //输入下面内容 &lt;?phpecho “hollow world!”;?&gt; :wq! //保存退出","tags":[]},{"title":"感想","date":"2017-03-31T14:21:31.726Z","path":"2017/03/31/hello-world/","text":"这个用的的确是很方便，简单的安装，比搭服务器也要简单的多，自己写点文章发表还是不错的，但是我想我们真的爱写博客也应该去尝试别的方法。提升自己的能力。 学习前端进程及理解在实际的练习之前还是应该先去理解所要用的一些恭喜，这样才能提高我们的记忆力，不要为了节省力气去网上随便找代码，这样根本对自己没得多大的提升；只有我们学的时候多花时间，在工作时才能省去更多的时间，才有时间去学习新的知识。总之我们学习中是不能偷懒的，还有面对困难不要气馁，不要恐惧未来的事情，想做的事就去做，不要总是想着他很难，也不要随意的相信别人的话，只有自己去做才能知道，所以我们必须勤快一点。","tags":[]}]